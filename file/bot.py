import json
import telebot

token = ""
bot = telebot.TeleBot(token)

chat_id = 1606415745
num = 0
questions = {1:
                     ['–¢–≤–æ–∏ –ª—é–±–∏–º—ã–µ —Ü–≤–µ—Ç–∞',
                          {"–ø–∞—Å—Ç–µ–ª—å–Ω—ã–µ —Ç–æ–Ω–∞": 3, "—è—Ä–∫–∏–µ": 2, "—Ç–µ–º–Ω—ã–µ": 1}
                      ],
                 2:
                     ['—Ç—ã –ø—Ä–µ–¥–ø–æ—á—Ç–µ—à—å:',
                          {"–ø–æ–π—Ç–∏ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω": 3, "–ø–æ–π—Ç–∏ –Ω–∞ –≤–µ—á–µ—Ä–∏–Ω–∫—É": 2, "–ø–æ–π—Ç–∏ –≤ –∫–∏–Ω–æ": 1}
                      ]
                 }

def save_progress(user_id, question_number):
    progress = {str(user_id): question_number}
    with open('progress.json', 'w') as file:
        json.dump(progress, file)

def load_progress(user_id):
    try:
        with open('progress.json', 'r') as file:
            progress = json.load(file)
            return progress.get(str(user_id))
    except FileNotFoundError:
        return None

@bot.message_handler(commands=['start'])
def handle_start(message):
    save_progress(message.chat.id, 1)  # —Å–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç–∏–∫üëã –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ –∞ –∫–∞–∫–æ–π —Ç—ã –∑–∞–ø–∞—Ö.. –î–∞–≤–∞–π —É–∑–Ω–∞–µ–º")
    show_question(message.chat.id, 1)

@bot.message_handler(commands=['help'])
def handle_help(message):
    bot.send_message(message.chat.id, "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –∑–∞–ø—É—Å–∫ –∞–Ω–∫–µ—Ç—ã\n/help - –ø–æ–º–æ—â—å")

def show_question(chat_id, question_number):
    global questions
    question_text = questions[question_number][0]
    options = questions[question_number][1]

    keyboard = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=True)
    for option in options:
        keyboard.add(telebot.types.KeyboardButton(option))

    bot.send_message(chat_id, question_text, reply_markup=keyboard)

@bot.message_handler(func=lambda message: True)
def handle_answer(message):
    global num
    user_id = message.chat.id
    progress = load_progress(user_id)
    try:
        if progress is not None:
            if progress < 2:
                num += questions[progress][1][message.text]
                save_progress(user_id, progress + 1)
                show_question(user_id, progress + 1)
            else:
                print(num)
                if num >=5:
                    bot.send_message(message.chat.id, '–¢—ã –ø–∞—Ö–Ω–µ—à—å —Ç–∞–∫ –∂–µ —Å–ª–∞–¥–∫–æ –∫–∞–∫ –∏ —Å–∞—Ö–∞—Ä–Ω–∞—è –≤–∞—Ç–∞üç≠')
                    bot.send_message(message.chat.id, '–ù–∞–∂–º–∏ /start –∏ –Ω–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ')
                elif num <=4 and num >=2  :
                    bot.send_message(message.chat.id, '–¢–≤–æ–π —Ñ—Ä—É–∫—Ç–æ–≤—ã–π –∑–∞–ø–∞—Ö –ø–æ–¥–Ω–∏–º–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µüçä')
                    bot.send_message(message.chat.id, '–ù–∞–∂–º–∏ /start –∏ –Ω–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ')
                else:
                    bot.send_message(message.chat.id, '–ü—Ä—è–Ω–æ–π –∑–∞–ø–∞—Ö, –∞ –ø–æ –¥—Ä—É–≥–æ–º—É —ç–ª–µ–∫—Å–∏—Ä —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏üç™')
                    bot.send_message(message.chat.id, '–ù–∞–∂–º–∏ /start –∏ –Ω–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ')
                save_progress(user_id, 1) # —Å–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        else:
            bot.send_message(user_id, "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–∞–∂–º–∏—Ç–µ /start.")
    except Exception as e:
        bot.send_message(message.chat.id, '–ß—Ç–æ - —Ç–æ –Ω–µ —Ç–∞–∫ü§î –Ω–∞–∂–º–∏ /start')
bot.polling()
